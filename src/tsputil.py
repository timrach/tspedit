import subprocess
import os
import tspio
import math

colors = ["Black", "Red", "Green", "Blue", "Orange", "Cyan",
          "Magenta", "Yellow", "Gray", "White", "Brown",
          "Pink", "Purple", "Violet"]


def solveTSP(filename, callback):
    subprocess.call(["./concorde", filename])
    # print(out.decode("utf-8"))
    # open solutionfile and parse solution string
    basename = os.path.splitext(filename)[0]
    solution = tspio.parseSolutionfile(basename + ".sol")
    # delete files generated by concorde
    file_prefixes = ["", "O"]
    file_extensions = [".tsp", ".sol", ".mas", ".pul", ".sav"]
    for pre in file_prefixes:
        for ext in file_extensions:
            fileToDelete = pre + basename + ext
            if os.path.isfile(fileToDelete):
                os.remove(fileToDelete)
    callback(solution.split())


def getPathLength(nodes, scale, path):
    result = 0
    path.append(path[0])
    for p in range(0, len(path) - 1):
        start = nodes[int(path[p])]
        end = nodes[int(path[p]) + 1]
        result += math.sqrt(math.pow((start.x - end.x) * scale, 2) +
                            math.pow((start.y - end.y) * scale, 2))
    return result


class FilenameWrapper:

    def __init__(self, filename):
        self.name = filename
